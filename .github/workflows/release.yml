name: Release

on:
  push:
    tags:
      - "v*"
  repository_dispatch:
  workflow_dispatch:

jobs:
  get-version:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          ref: ${{ github.ref_name }}

      - name: Extract version
        id: version
        run: |
          VERSION=$(grep 'PKG_VERSION:=' ./Makefile | awk -F '=' '{print $2}')
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "New Version: ${VERSION}"

  build:
    needs: get-version
    runs-on: ubuntu-20.04
    steps:
      - name: Initialization Environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          echo -e "Total CPU cores\t: $(nproc)"
          cat /proc/cpuinfo | grep 'model name'
          free -h
          uname -a
          [ -f /proc/version ] && cat /proc/version
          [ -f /etc/issue.net ] && cat /etc/issue.net
          [ -f /etc/issue ] && cat /etc/issue
          ulimit -a

      - name: Download SDK
        run: |
          wget https://downloads.openwrt.org/releases/23.05.5/targets/x86/64/openwrt-sdk-23.05.5-x86-64_gcc-12.3.0_musl.Linux-x86_64.tar.xz
          xz -d openwrt-sdk-23.05.5-x86-64_gcc-12.3.0_musl.Linux-x86_64.tar.xz
          tar -xf openwrt-sdk-23.05.5-x86-64_gcc-12.3.0_musl.Linux-x86_64.tar
          mv openwrt-sdk-23.05.5-x86-64_gcc-12.3.0_musl.Linux-x86_64 openwrt-sdk

      - name: Build
        id: build
        run: |
          cd openwrt-sdk
          git clone  --depth=1 -b "${{ github.ref_name }}" https://github.com/rizkikotet-dev/luci-theme-rtawrt.git package/luci-theme-rtawrt
          ./scripts/feeds update -a && ./scripts/feeds install -a
          echo "CONFIG_PACKAGE_luci-theme-rtawrt=y" >> .config
          make defconfig
          make package/luci-theme-rtawrt/compile V=s -j$(nproc)
          TARGET="$(find bin/ | grep  luci-theme-rtawrt)"
          echo "TARGET=$(pwd)/$TARGET"
          echo "TARGET=$(pwd)/$TARGET" >> $GITHUB_OUTPUT
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Upload to release
        uses: softprops/action-gh-release@v1
        if: steps.build.outputs.status == 'success' && !cancelled()
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          name: v${{ needs.get-version.outputs.version }}
          tag_name: v${{ needs.get-version.outputs.version }}
          prerelease: false
          generate_release_notes: true
          files: |
            ${{ steps.build.outputs.TARGET }}
            LICENSE
